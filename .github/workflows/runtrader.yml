name: RunTrader

on:
  workflow_dispatch: {}                 # manual button
  schedule:
    - cron: "30 21 * * 1-5"            # 4:30pm ET, Mon–Fri
  push:
    branches: [ main ]                  # run when you commit to main
  pull_request: {}                      # PRs get a lightweight check

permissions:
  contents: read

concurrency:
  group: runtrader
  cancel-in-progress: true

jobs:
  # -------- PR check so PRs don't show "Failure 0s" --------
  pr_check:
    if: ${{ github.event_name == 'pull_request' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Preflight (no secrets needed)
        run: |
          echo "Branch: $GITHUB_HEAD_REF -> $GITHUB_BASE_REF"
          echo "Top-level files:"; ls -la
          test -f "Start Your Own/Trading_Script.py" && echo "✔ Trading_Script.py found" || (echo "✖ Missing: Start Your Own/Trading_Script.py" && exit 1)
          echo "PR preflight OK."

  # -------- full run (manual / schedule / push) --------
  run:
    if: ${{ github.event_name != 'pull_request' }}
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_INPUT: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install Python deps (prefer wheels)
        run: |
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install --prefer-binary -r requirements.txt || true
          fi
          pip install --prefer-binary numpy pandas matplotlib yfinance requests openai

      - name: Run trading + graph
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          echo ">>> Trading_Script.py"
          python -u "Start Your Own/Trading_Script.py" --headless || echo "⚠ Trading_Script.py returned nonzero"
          if [ -f "Start Your Own/Generate_Graph.py" ]; then
            echo ">>> Generate_Graph.py"
            python -u "Start Your Own/Generate_Graph.py" || echo "⚠ Generate_Graph.py returned nonzero"
          fi
          if [ ! -f signals.csv ]; then
            echo "date,symbol,side,entry,stop,target,confidence,notes" > signals.csv
            echo "⚠ Created blank signals.csv"
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: |
            signals.csv
            **/*.png
            **/*.csv
            **/*.txt
          if-no-files-found: warn

      - name: Route orders via Alpaca (PAPER)
        if: ${{ secrets.ALPACA_API_KEY && secrets.ALPACA_SECRET_KEY && secrets.ALPACA_BASE_URL }}
        env:
          ALPACA_API_KEY:     ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY:  ${{ secrets.ALPACA_SECRET_KEY }}
          ALPACA_BASE_URL:    ${{ secrets.ALPACA_BASE_URL }}
          RISK_PCT_PER_TRADE: "0.005"
          MAX_POS_PCT:        "0.10"
          MAX_OPEN_NAMES:     "5"
          ACCOUNT_EQUITY:     ""
          ALLOW_SHORTS:       "false"
          USE_LIMIT:          "false"
          TIME_IN_FORCE:      "day"
        run: python automation/order_router.py

      - name: Email results via Outlook
        if: ${{ secrets.SMTP_SERVER && secrets.SMTP_PORT && secrets.SMTP_USER && secrets.SMTP_PASS }}
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}
          SMTP_USER:   ${{ secrets.SMTP_USER }}
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}
        run: |
          python - <<'PY'
import smtplib, ssl, os, glob
from email.message import EmailMessage
srv=os.environ['SMTP_SERVER']; port=int(os.environ['SMTP_PORT'])
usr=os.environ['SMTP_USER']; pwd=os.environ['SMTP_PASS']
to="mona.ghadiri@outlook.com"
msg=EmailMessage(); msg['Subject']="RunTrader Results (post-close)"; msg['From']=usr; msg['To']=to
msg.set_content("Attached: today's trading signals and any generated charts.\n")
if os.path.exists("signals.csv"):
  with open("signals.csv","rb") as f: msg.add_attachment(f.read(),maintype="text",subtype="csv",filename="signals.csv")
for p in glob.glob("*.png"):
  with open(p,"rb") as f: msg.add_attachment(f.read(),maintype="image",subtype="png",filename=os.path.basename(p))
ctx=ssl.create_default_context()
with smtplib.SMTP(srv,port) as s:
  s.starttls(context=ctx); s.login(usr,pwd); s.send_message(msg)
print("✅ Email sent to", to)
PY