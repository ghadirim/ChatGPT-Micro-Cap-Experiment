name: RunTrader PostClose

on:
  workflow_dispatch:
  schedule:
    - cron: "30 21 * * 1-5"  # 4:30pm ET, Mon–Fri
  push:
    branches:
      - main

permissions:
  contents: read

concurrency:
  group: runtrader-v8
  cancel-in-progress: true

jobs:
  run:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      PYTHONUNBUFFERED: "1"
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PIP_NO_INPUT: "1"

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Preflight (verify files exist)
        shell: bash
        run: |
          set -euo pipefail
          echo "Tree (first 3 levels):"
          find . -maxdepth 3 -type f | sort | head -n 200
          if [ ! -f 'Start Your Own/Trading_Script.py' ]; then
            echo "MISSING: Start Your Own/Trading_Script.py"
            exit 1
          fi
          if [ ! -f 'Start Your Own/Generate_Graph.py' ]; then
            echo "Note: Generate_Graph.py not found (will skip)."
          fi

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies (prefer wheels)
        shell: bash
        run: |
          set -euo pipefail
          python -V
          python -m pip install -U pip
          if [ -f requirements.txt ]; then
            pip install --prefer-binary -r requirements.txt || true
          fi
          pip install --prefer-binary numpy pandas matplotlib yfinance requests openai

      - name: Run Trading_Script.py
        shell: bash
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          set -e
          echo '>>> Trading_Script.py starting'
          python -u 'Start Your Own/Trading_Script.py' --headless || echo 'WARN: Trading_Script.py returned nonzero'
          if [ ! -f signals.csv ]; then
            echo 'date,symbol,side,entry,stop,target,confidence,notes' > signals.csv
            echo 'Created blank signals.csv'
          fi

      - name: Run Generate_Graph.py (optional)
        shell: bash
        run: |
          set -e
          if [ -f 'Start Your Own/Generate_Graph.py' ]; then
            echo '>>> Generate_Graph.py starting'
            python -u 'Start Your Own/Generate_Graph.py' || echo 'WARN: Generate_Graph.py returned nonzero'
          else
            echo 'Skipping graph (file not present)'
          fi

      - name: Prepare outputs
        shell: bash
        run: |
          set -e
          mkdir -p outputs
          [ -f signals.csv ] && cp -f signals.csv outputs/ || true
          find . -maxdepth 3 -type f -name '*.png' -exec cp -n {} outputs/ \; || true
          find . -maxdepth 3 -type f -name '*.csv' -exec cp -n {} outputs/ \; || true
          find . -maxdepth 3 -type f -name '*.txt' -exec cp -n {} outputs/ \; || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: outputs
          path: outputs

      - name: Route orders via Alpaca (paper) — safe skip
        shell: bash
        env:
          ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
          ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
          ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}   # e.g. https://paper-api.alpaca.markets
          RISK_PCT_PER_TRADE: "0.005"
          MAX_POS_PCT: "0.10"
          MAX_OPEN_NAMES: "5"
          ACCOUNT_EQUITY: ""
          ALLOW_SHORTS: "false"
          USE_LIMIT: "false"
          TIME_IN_FORCE: "day"
        run: |
          set -e
          if [ -n "$ALPACA_API_KEY" ] && [ -n "$ALPACA_SECRET_KEY" ] && [ -n "$ALPACA_BASE_URL" ]; then
            echo 'Alpaca secrets present -> placing PAPER orders'
            python automation/order_router.py
          else
            echo 'Skipping Alpaca (one or more Alpaca secrets missing).'
          fi

      - name: Email results via Gmail (only if there are real signals or charts)
        shell: bash
        env:
          SMTP_SERVER: ${{ secrets.SMTP_SERVER }}   # smtp.gmail.com
          SMTP_PORT:   ${{ secrets.SMTP_PORT }}     # 587
          SMTP_USER:   ${{ secrets.SMTP_USER }}     # your Gmail address
          SMTP_PASS:   ${{ secrets.SMTP_PASS }}     # 16-char Gmail App Password
          TO_EMAIL:    mona.ghadiri@outlook.com
        run: |
          set -euo pipefail
          # Check secrets present
          if [ -z "${SMTP_SERVER:-}" ] || [ -z "${SMTP_PORT:-}" ] || [ -z "${SMTP_USER:-}" ] || [ -z "${SMTP_PASS:-}" ]; then
            echo "Skipping email: one or more SMTP secrets missing."
            exit 0
          fi
          # Determine if we have anything to send:
          HAVE_ROWS=0
          if [ -f outputs/signals.csv ]; then
            # count non-empty, non-header rows
            ROWS=$(tail -n +2 outputs/signals.csv | grep -Ev '^[[:space:]]*$' | wc -l || true)
            if [ "${ROWS:-0}" -gt 0 ]; then
              HAVE_ROWS=1
            fi
          fi
          PNG_COUNT=$(ls outputs/*.png 2>/dev/null | wc -l | tr -d ' ' || echo 0)
          if [ "${HAVE_ROWS}" -eq 0 ] && [ "${PNG_COUNT}" -eq 0 ]; then
            echo "No non-header signals and no charts. Skipping email."
            exit 0
          fi
          # Send email via Gmail SMTP with STARTTLS
          python - <<'PY'
import os, ssl, smtplib, glob
from email.message import EmailMessage

server = os.environ["SMTP_SERVER"]
port   = int(os.environ.get("SMTP_PORT","587"))
user   = os.environ["SMTP_USER"]
pwd    = os.environ["SMTP_PASS"]
to     = os.environ.get("TO_EMAIL", user)

msg = EmailMessage()
msg["Subject"] = "RunTrader results (post-close)"
msg["From"] = user
msg["To"] = to
msg.set_content("Attached: today's trading signals and any generated charts.\n")

# Attach signals.csv if it has non-header rows
sig_path = "outputs/signals.csv"
if os.path.exists(sig_path):
    with open(sig_path, "r", encoding="utf-8", errors="ignore") as f:
        lines = [ln for ln in f.read().splitlines()]
    data_rows = [ln for ln in lines[1:] if ln.strip()]
    if data_rows:
        with open(sig_path, "rb") as f:
            msg.add_attachment(f.read(), maintype="text", subtype="csv", filename="signals.csv")

# Attach charts
for p in sorted(glob.glob("outputs/*.png")):
    with open(p, "rb") as f:
        msg.add_attachment(f.read(), maintype="image", subtype="png", filename=os.path.basename(p))

ctx = ssl.create_default_context()
with smtplib.SMTP(server, port, timeout=40) as s:
    s.ehlo()
    s.starttls(context=ctx)
    s.ehlo()
    s.login(user, pwd)
    s.send_message(msg)
print("Email sent via Gmail SMTP.")
PY
